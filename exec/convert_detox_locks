#!/usr/bin/env python

## Temporary script to convert web-based locks into registry-based local locks

import sys
import os
import re
import time
import fnmatch

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Convert web-based locks to registry locks')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat import Configuration, Dataset, Block, ObjectError

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import authorized, make_standard_logger

LOG = make_standard_logger(config.log_level)

## Start conversion
from dynamo.policy.producers.weblock import WebReplicaLock
from dynamo.core.executable import inventory, authorizer
from dynamo.registry.registry import RegistryDatabase

LOG.info('Translating web-based replica locks into DB-based locks.')

expiry = time.strftime('%Y-%m-%d', time.localtime(time.time() + 3600 * 24 * 60))
comment = 'Auto-produced by dynamo'

# The registry object
registry = RegistryDatabase()

if authorized:
    while True:
        registry.lock_app('detox', config.applock_user)
        user, service, lock_time, note, depth = registry.get_app_lock('detox')
        if user == config.applock_user:
            break

        LOG.info('Applock is held by %s:%s. Waiting 60 seconds to retry.', user, service)
        time.sleep(60)

try:
    registry.db.lock_tables(write = ['detox_locks'], read = ['user_services'])

    # we process one source at a time, because each source registers mysql locks as a different user
    for name, source_conf in config.sources.items():
        try:
            service_id = registry.db.query('SELECT `id` FROM `user_services` WHERE `name` = %s', source_conf.service)[0]
        except IndexError:
            raise RuntimeError('Unknown service %s' % source_conf.service)

        LOG.info('Translating ' + name)

        existing_lock_ids = {}
        sql = 'SELECT `id`, `item`, `sites` FROM `detox_locks` WHERE `user` = %s AND `service_id` = %s AND `unlock_date` IS NULL'
        for lid, item, site in registry.db.xquery(sql, source_conf.user, service_id):
            existing_lock_ids[(item, site)] = lid

        existing_locks = set(existing_lock_ids.iterkeys())
    
        instance_conf = Configuration(sources = {name: source_conf.clone()}, auth = config.auth)
        weblock = WebReplicaLock(instance_conf)

        loaded_locks = set()
        for item, site in weblock.get_list(inventory):
            if site is None:
                site_name = None
            else:
                site_name = site.name

            if type(item) is Dataset:
                loaded_locks.add((item.name, site_name))
            else:
                loaded_locks.add((item.full_name(), site_name))

        num_locked = 0

        # lock new appearences
        for item, site in loaded_locks - existing_locks:
            sql = 'INSERT INTO `detox_locks` (`item`, `sites`, `lock_date`, `expiration_date`, `user`, `service_id`, `comment`)'
            sql += ' VALUES (%s, %s, NOW(), %s, %s, %s, \'Auto-produced by dynamo\')'
            if authorized:
                registry.db.query(sql, item, site, expiry, source_conf.user, service_id)

            num_locked += 1

        num_unlocked = 0

        # unlock excess
        for item, site in existing_locks - loaded_locks:
            if authorized:
                registry.db.query('UPDATE `detox_locks` SET `unlock_date` = NOW() WHERE `id` = %s', existing_lock_ids[(item, site)])

            num_unlocked += 1
    
        LOG.info('Locked: %d, Unlocked: %d', num_locked, num_unlocked)

    registry.db.unlock_tables()

finally:
    if authorized:
        registry.unlock_app('detox', config.applock_user)
