#!/usr/bin/env python

import sys
import os

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Detox')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat.configuration import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import read_only, make_standard_logger

LOG = make_standard_logger(config.log_level)

## Instantiate registry backend
from dynamo.utils.interface.mysql import MySQL

# need to lock tables -> reuse connections
config.registry['reuse_connection'] = True

registry = MySQL(config.registry)

## Loop over active transfers and check against inventory
from dynamo.core.executable import inventory
from dynamo.dataformat import Block, ObjectError

if not read_only:
    registry.query('LOCK TABLES `active_copies` WRITE, `active_copies` AS a READ, `copy_requests` AS r READ')

def update(request_id, item, site):
    if read_only:
        return

    sql = 'UPDATE `active_copies` SET `status` = \'completed\', `updated` = NOW() WHERE `request_id` = %s AND `item` = %s AND `site` = %s'
    registry.query(sql, request_id, item, site)

sql = 'SELECT r.`id`, a.`item`, a.`site`, r.`group` FROM `active_copies` AS a'
sql += ' INNER JOIN `copy_requests` AS r ON r.`id` = a.`request_id`'
sql += ' WHERE a.`status` IN (\'new\', \'queued\')'

for request_id, item_name, site_name, group_name in registry.query(sql):
    try:
        site = inventory.sites[site_name]
    except KeyError:
        LOG.error('Unknown site %s', site_name)
        continue
    
    try:
        group = inventory.groups[group_name]
    except KeyError:
        LOG.error('Unknown group %s', group_name)
        continue

    try:
        dataset_name, block_name = Block.from_full_name(item_name)
    except ObjectError:
        dataset_name = item_name
        block_name = None
    else:
        pass
        
    try:
        dataset = inventory.datasets[dataset_name]
    except KeyError:
        LOG.error('Unknown dataset %s', dataset_name)
        continue

    if block_name is None:
        replica = site.find_dataset_replica(dataset)
        if replica is None:
            LOG.debug('Replica %s:%s not created yet', site.name, dataset.name)
            continue

        owners = set(br.group for br in replica.block_replicas)

        if len(owners) > 1 or list(owners)[0] != group:
            LOG.error('%s is not owned by %s.', replica, group)
            continue

        if replica.is_complete():
            LOG.debug('%s complete', replica)
            update(request_id, item_name, site_name)
        else:
            LOG.debug('%s incomplete', replica)

    else:
        block = dataset.find_block(block_name)
        if block is None:
            LOG.error('Unknown block %s', item_name)

        replica = site.find_block_replica(block)
        if replica is None:
            LOG.debug('Replica %s:%s not created yet', site.name, block.full_name())
            continue

        if replica.group != group:
            LOG.error('%s is not owned by %s.', replica, group)
            continue

        if replica.is_complete():
            LOG.debug('%s complete', replica)
            update(request_id, item_name, site_name)
        else:
            LOG.debug('%s incomplete', replica)

if not read_only:
    registry.query('UNLOCK TABLES')

## Set the request status
if not read_only:
    registry.query('LOCK TABLES `copy_requests` WRITE, `copy_requests` AS r WRITE, `active_copies` AS a READ')

def update(request_id):
    if read_only:
        return

    sql = 'UPDATE `copy_requests` SET `status` = \'completed\' WHERE `id` = %s'
    registry.query(sql, request_id)

sql = 'SELECT r.`id`, a.`status` FROM `copy_requests` AS r INNER JOIN `active_copies` AS a ON a.`request_id` = r.`id`'
sql += ' WHERE r.`status` = \'activated\''

_request_id = 0
all_complete = False
for request_id, status in registry.query(sql):
    if request_id != _request_id:
        if all_complete:
            update(_request_id)

        _request_id = request_id
        all_complete = True

    if status != 'completed':
        all_complete = False

if all_complete:
    update(_request_id)

if not read_only:
    registry.query('UNLOCK TABLES')
