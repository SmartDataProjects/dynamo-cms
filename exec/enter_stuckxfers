#!/usr/bin/env python

###############################################################
####### This script will spit out png files monitoring ########
####### the copy status through Phedex on three levels: #######
####### -per replica, -per request, -per site #################
#
####### yiiyama@mit.edu, bmaier@mit.edu #######################
###############################################################

import sys
import os
import time
import shutil
import selinux
import collections
import csv

from datetime import datetime, timedelta

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Track transfers')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

from dynamo.dataformat import Configuration
from dynamo.utils.parallel import Map
import dynamo.core.executable as executable

## Configuration

config = Configuration(args.config)

## Logger
LOG = executable.make_standard_logger(config.log_level)

## Data source
import dynamo.history.impl as history_impl
from dynamo.dataformat.history import HistoryRecord
import dynamo.operation.impl as operation_impl

from dynamo.core.executable import inventory
from dynamo.dataformat import Site

from dynamo.utils.interface.phedex import PhEDEx
from dynamo.utils.interface.mysql import MySQL

class Request(object):
    __slots__ = ['reqid','target','missFiles','submitted','updateRequests','addMissFiles','addSubmitted']

    def __init__(self, reqid,target):
        self.reqid = reqid
        self.target = target
        self.missFiles = {}
        self.submitted = {}

    def updateRequest(self,target,dsetName):
        if target != self.target:
            print 'targets mismatch: ' + target + '!=' + self.target
            return

        if '#' in dsetName:
            dsetName = dsetName.split('#')[0]
        if dsetName not in self.missFiles:
            self.missFiles[dsetName] = []

    def addMissFiles(self,dsetName,fileName):
        self.missFiles[dsetName].append(fileName)

    def addSubmitted(self,dsetName,fileName):
        if dsetName not in self.submitted:
            self.submitted[dsetName] = []
        self.submitted[dsetName].append(fileName)

nowTime = int(time.time())
maxTime = nowTime - 360*24*60*60


def looksLikeStuck(invObj, site, tdate):
    if (nowTime - tdate) < 60*60*24*3:
        return False
    if 'T0_'  in site : return False
    if 'T3_'  in site : return False
    if '_MSS' in site : return False

    if site not in inventory.sites:
        return False
    if inventory.sites[site].status != Site.STAT_READY:
        return False

    return True


inventory = executable.inventory

phedexStuck = {}
dynamoStuck = {}
doneRequests = {}

print " ... starting execution"

phedex = PhEDEx(config.phedex)
GET, POST = range(2)
datasets = phedex.make_request('subscriptions', ['percent_max=99.999','move=n','create_since=%d' % maxTime])
for dataset_entry in datasets:
    if 'block' in dataset_entry:
        for block_entry in dataset_entry['block']:
            for subscription in block_entry['subscription']:
                reqid = subscription["request"]
                site =  subscription["node"]
                tdate =  int(subscription['time_update'])
                dsetName = block_entry['name']

                if not looksLikeStuck(inventory, site, tdate):
                    continue

                if reqid not in phedexStuck:
                    phedexStuck[reqid] = Request(reqid,site)
                phedexStuck[reqid].updateRequest(site,dsetName)
    else:
        for subscription in dataset_entry['subscription']:
            reqid = subscription["request"]
            site =  subscription["node"]
            tdate = int(subscription['time_update'])
            dsetName = dataset_entry['name']

            if not looksLikeStuck(inventory, site, tdate):
                continue

            if reqid not in phedexStuck:
                phedexStuck[reqid] = Request(reqid,site)
            phedexStuck[reqid].updateRequest(site,dsetName)

print " Number of PhEDEx stuck requests = " + str(len(phedexStuck.keys()))

for reqid in phedexStuck:
    target = phedexStuck[reqid].target
    datasets = phedexStuck[reqid].missFiles.keys()
    if reqid == 664972:
        print target
        print datasets
    
    for dsetName in datasets:
        statVals = ['block='+dsetName+'#*','node=' + target]
        status = phedex.make_request('missingfiles', statVals)
        if reqid == 664972:
            print status
        for block in status:
            if reqid == 664972:
                print block
            for allFiles in block['file']:
                phedexStuck[reqid].addMissFiles(dsetName,allFiles['name'])
    
mysql_reg = MySQL(config.db_params)
history = getattr(history_impl, config.history.module)(config.history.config)

for partition in config.partitions:
    partition_records = history.get_incomplete_copies(partition)    
    for record in partition_records:
        reqid = int(record.operation_id)
        site = history.get_site_name(record.operation_id)
        timest = record.timestamp
        datasets = record.replicas

        if not looksLikeStuck(inventory, site, timest):
            continue

        for copyRepl in datasets:
            status = copyRepl.status
            if status == HistoryRecord.ST_COMPLETE:
                continue
            if status == HistoryRecord.ST_CANCELLED:
                continue
        
            if reqid not in dynamoStuck:
                dynamoStuck[reqid] = Request(reqid,site)
            dynamoStuck[reqid].updateRequest(site,copyRepl.dataset_name)


print " Number of Dynamo stuck requests = " + str(len(dynamoStuck.keys()))

set1 = set(dynamoStuck.keys())
set2 = set(phedexStuck.keys())

matched = set1.intersection(set2)
unmatched = set1.difference(set2)

print len(matched)
print len(unmatched)

print unmatched

sqlLine = "select * from transfer_queue where reqid!=0 and status!='failed' order by reqid"
dbRequests = mysql_reg.query(sqlLine)
for line in dbRequests:
    reqid = int(line[0])
    lfile = line[1]
    if reqid not in doneRequests:
        doneRequests[reqid] = []
    doneRequests[reqid].append(lfile)

notFilledSets = '/tmp/uncompleted.txt'
missingSets = '/tmp/missingSets.txt'

nfis = open(notFilledSets,'w')
miss = open(missingSets,'w')

totalTransfers = 0
totalVolume = 0
totalReqs = 0

#for reqid in sorted(matched):
for reqid in sorted(set2):
    reqObj = phedexStuck[reqid]
    target = reqObj.target
    reqid  = reqObj.reqid
    datasets = reqObj.missFiles.keys()
    siteObj = inventory.sites[target]
    for dsetName in datasets:
        if dsetName not in inventory.datasets:
            print " .. not found " + dsetName
            continue
                
        dsetObj = inventory.datasets[dsetName]
        dataset_replica = dsetObj.find_replica(siteObj)
        if dataset_replica is None:
            miss.write(siteObj.name + " " + dsetName + "\n")
            continue

        missFiles = reqObj.missFiles[dsetName]
        if len(missFiles) > 1000:
            print reqid
            print target
            print dsetName
            print len(missFiles)
            continue

        if len(missFiles) < 1:
            print " ... why am i here"
            print reqid
            print target
            print dsetName

        for fileName in missFiles:
            fileObj =  dsetObj.find_file(fileName)
            blockObj = fileObj.block

            block_replicas = blockObj.replicas
        
            sources = []
            for blockRepObj in block_replicas:
                if not blockRepObj.is_complete:      continue
                if blockRepObj.site.name == target:  continue
                if blockRepObj.site.status != Site.STAT_READY: continue
                sources.append(blockRepObj.site.name)
                
            if len(sources) == 0:
                nfis.write(dsetName + '\n')
                break

            sources = [x for x in sources if "Export" not in x]
            sources = [x for x in sources if "Buffer" not in x]
            nontape = [x for x in sources if "MSS" not in x]
            if len(nontape) > 0:  sources = nontape                
            if len(sources) == 0: continue

            if reqid in doneRequests and fileName in doneRequests[reqid]:
                #print " already done with " + str(reqid) + " " + fileName
                continue

            for theSource in sorted(sources):
                sqlFields = ('reqid','file','site_from','site_to','status','fsize')
                sqlValues = (reqid,fileName,theSource,target,'new',fileObj.size)
                #print sqlValues

                var_string = ', '.join(['%s'] * len(sqlValues))
                sql = 'insert ignore into transfer_queue (reqid,file,site_from,site_to,status,fsize) '
                sql += ' values (%s)' % var_string
                try:
                    mysql_reg.query(sql,*sqlValues)
                except:
                    pass
            totalTransfers += 1
            totalVolume += fileObj.size
            reqObj.addSubmitted(dsetName,fileName)
    
    totalReqs += 1
    print target + " " + str(reqid) + " : " + str(len(reqObj.submitted.keys())) ,
    print [len(v) for v in reqObj.submitted.values()]
    if totalReqs > 100:
        break
    #sys.exit(2)
                 
nfis.close()
miss.close()

print " Tot Trans = " + str(totalTransfers) + ", Volume = ",
print str(int(totalVolume/(1024*1024*1024*1024))) + " TBs"
                


   



