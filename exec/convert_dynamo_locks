#!/usr/bin/env python

## Temporary script to convert web-based locks into registry-based local locks

import sys
import os
import re
import time
import fnmatch

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Convert web-based locks to registry locks')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat import Configuration, Dataset, Block, ObjectError

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import read_only, make_standard_logger

LOG = make_standard_logger(config.log_level)

if not read_only:
    ## Check if another process is running
    process_exists = False
    
    while os.path.exists(config.process_lock):
        try:
            source = open(config.process_lock)
        except (OSError, IOError):
            break
    
        process_exists = True
    
        pid = int(source.read().strip())
        source.close()
    
        try:
            with open('/proc/%d/cmdline' % pid) as proc:
                if not 'dynamod' in proc.read():
                    raise Exception()
        except:
            LOG.error('Lock file %s exists but process %d is not a Dynamo process.', config.process_lock, pid)
            os.unlink(config.process_lock)
            process_exists = False
            break
    
        LOG.info('Another process %d is performing the lock conversion. Waiting for completion.', pid)
        time.sleep(5)
    
    if process_exists:
        LOG.info('Locks are converted by another process. Exiting.')
        sys.exit(0)

    with open(config.process_lock, 'w') as process_lock:
        process_lock.write('%d' % os.getpid())

## Start conversion
from dynamo.policy.producers import WebReplicaLock
from dynamo.utils.interface.mysql import MySQL
from dynamo.core.executable import inventory, authorizer
from dynamo.operation.impl.mysqlapplock import MySQLApplicationLockInterface

LOG.info('Translating web-based replica locks into DB-based locks.')

expiry = '2018-06-30'
comment = 'Auto-produced by dynamo'

# will query PhEDEx later for those
unlocked_datasets = set()

if not read_only:
    lock = MySQLApplicationLockInterface(config.applock, authorizer)
    lock.lock()

mysql = MySQL(Configuration(db = 'dynamoregister', reuse_connection = True))
mysql.query('LOCK TABLES `detox_locks` WRITE')

try:
    # we process one source at a time, because each source registers mysql locks as a different user
    for name, source_conf in config.sources.items():
        userdata = authorizer.identify_user(name = source_conf.user, with_id = True)
        if userdata is None:
            raise RuntimeError('Unknown user %s' % source_conf.user)

        user, user_id = userdata

        roledata = authorizer.identify_role(name = source_conf.role, with_id = True)
        if roledata is None:
            raise RuntimeError('Unknown role %s' % source_conf.role)
        
        role, role_id = roledata

        LOG.info('Translating ' + name)

        existing_lock_ids = {}
        sql = 'SELECT `id`, `item`, `sites` FROM `detox_locks` WHERE `user_id` = %s AND `role_id` = %s AND `unlock_date` IS NULL'
        for lid, item, site in mysql.xquery(sql, user_id, role_id):
            existing_lock_ids[(item, site)] = lid

        existing_locks = set(existing_lock_ids.keys())
    
        instance_conf = Configuration({'sources': {name: source_conf.clone()}, 'auth': config.auth})
        weblock = WebReplicaLock(instance_conf)

        loaded_locks = set()
        for item, site in weblock.get_list(inventory):
            if site is None:
                site_name = None
            else:
                site_name = site.name

            if type(item) is Dataset:
                loaded_locks.add((item.name, site_name))
            else:
                loaded_locks.add((item.full_name(), site_name))

        num_locked = 0

        # lock new appearences
        for item, site in loaded_locks - existing_locks:
            sql = 'INSERT INTO `detox_locks` (`item`, `sites`, `lock_date`, `expiration_date`, `user_id`, `role_id`, `comment`)'
            sql += ' VALUES (%s, %s, NOW(), %s, %s, %s, \'Auto-produced by dynamo\')'
            if not read_only:
                mysql.query(sql, item, site, expiry, user_id, role_id)
            num_locked += 1

        num_unlocked = 0

        # unlock excess
        for item, site in existing_locks - loaded_locks:
            if not read_only:
                mysql.query('UPDATE `detox_locks` SET `unlock_date` = NOW() WHERE `id` = %s', existing_lock_ids[(item, site)])
            num_unlocked += 1

            try:
                dataset_name, block_name = Block.from_full_name(item)
            except ObjectError:
                unlocked_datasets.add(item)
            else:
                unlocked_datasets.add(dataset_name)
    
        LOG.info('Locked: %d, Unlocked: %d', num_locked, num_unlocked)

    if not read_only:
        # Intentionally removing the file only when everything succeeds
        os.unlink(config.process_lock)

finally:
    if not read_only:
        lock.unlock()

mysql.query('UNLOCK TABLES')

# update block replicas that got unlocked
from dynamo.source.impl import PhEDExReplicaInfoSource

replica_source = PhEDExReplicaInfoSource(config.replica_source)

for dataset_name in unlocked_datasets:
    try:
        dataset = inventory.datasets[dataset_name]
    except KeyError:
        continue
        
    source_reps = replica_source.get_replicas(dataset = dataset.name)
    if len(source_reps) == 0:
        # not good but fine
        continue

    for rep in source_reps:


        inventory.update(rep)
