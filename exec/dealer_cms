#!/usr/bin/env python

import sys
import os
import re
import fnmatch

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Dealer')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON.')
parser.add_argument('--comment', '-m', metavar = 'COMMENT', dest = 'comment', help = 'Comment to be sent to deletion interface as well as the local deletion record.')
parser.add_argument('--test-run', '-T', action = 'store_true', dest = 'test_run', help = 'Do not make any actual deletion requests or changes to inventory. Create a new cycle.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat.configuration import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import make_standard_logger, read_only

LOG = make_standard_logger(config.log_level)

## Run the main detox object
from dynamo.dealer.main import Dealer
from dynamo.core.executable import inventory

LOG.info('Starting Dealer.')

dealer_config = config.dealer
if 'balancer' in dealer_config.plugins:
    dealer_config.plugins.balancer.config.detox_history = config.detox_history
if 'undertaker' in dealer_config.plugins:
    dealer_config.plugins.undertaker.config.detox_history = config.detox_history

dealer_config.test_run = args.test_run

dealer = Dealer(dealer_config)

if read_only:
    dealer.copy_op.dry_run = True
    dealer.history.read_only = True
    for plugin in dealer.get_plugins():
        plugin.read_only = True

dealer.run(inventory, comment = args.comment)

## If test run, don't send back the inventory updates
if args.test_run:
    inventory.clear_update()
